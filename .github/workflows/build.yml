name: Build

on:
  push:
    branches:
      - master

permissions: {}

jobs:
  build:
    runs-on: ubuntu-latest
    name: Build modified repos
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2 # OR "2" -> To retrieve the preceding commit.

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v44
        with:
          files: "repos/**/*"

      - name: Login into GitHub Container Registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Build docker images
        if: steps.changed-files.outputs.any_changed == 'true'
        id: build
        env:
          ALL_CHANGED_FILES: ${{ steps.changed-files.outputs.all_changed_files }}
        run: |
          baseFolder=`pwd`
          output=""

          for file in ${ALL_CHANGED_FILES}; do
            # access root folder
            cd $baseFolder
            
            # entry in folder of changed file
            cd $(dirname $file)

            # check it's a repo with metadata
            if [ -f "metadata.json" ]; then
              name=`jq -r '.name' metadata.json`
              description=`jq -r '.description' metadata.json`
              repoName=ghcr.io/$name:latest

              echo "Building $name: $description"

              # pull latest version (ignore errors)
              docker pull $repoName || true

              # build docker image
              docker build -t $repoName .

              # add name of build into output
              if [ -z "$output" ]; then
                output="$repoName"
              else
                output="$output $repoName"
              fi
            fi
          done

          if [ -z "$output" ]; then
            echo "No repos to build"
          else
            echo "Built repos: $output"
            echo "repos=$output" >> $GITHUB_OUTPUT
          fi

      - name: Push docker images
        if: steps.build.outputs.repos != ''
        env:
          REPOS: ${{ steps.build.outputs.repos }}
        run: |
          for repo in $REPOS; do
            echo "Pushing $repo"
            docker push $repo
          done
